generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  bio          String?
  avatarUrl    String?
  createdAt    DateTime @default(now())

  posts    Post[]
  comments Comment[]
  likes    Like[]
  sentMsgs Message[]    @relation("SentMessages")
  rooms    RoomMember[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  comments   Comment[]
  likes      Like[]
  categories PostCategory[] // ðŸ‘ˆ New relation added here
}

model Category {
  id    String         @id @default(cuid())
  name  String         @unique
  posts PostCategory[]
}

model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
}

model Room {
  id        String       @id @default(cuid())
  name      String?
  isPrivate Boolean      @default(false)
  createdAt DateTime     @default(now())
  members   RoomMember[]
  messages  Message[]
}

model RoomMember {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  @@unique([userId, roomId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
}
